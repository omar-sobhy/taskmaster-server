{
  "openapi": "3.0.2",
  "info": {
    "title": "Taskmaster",
    "version": "1.0",
    "description": "Taskmaster API. \n # Authentication \n <SecurityDefinitions /> "
  },
  "components": {
    "examples": {},
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "Authorization"
      }
    },
    "schemas": {
      "GeneralErrorSchema": {
        "properties": {
          "error": {
            "properties": {
              "message": {
                "type": "string"
              }
            }
          }
        }
      },
      "LoginValidationErrorSchema": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GeneralErrorSchema"
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "object",
                "properties": {
                  "property": {
                    "type": "string",
                    "enum": ["username", "password"]
                  },
                  "propsErrors": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": ["minLength", "maxLength", "isString"]
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "SignupValidationErrorSchema": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GeneralErrorSchema"
          },
          {
            "type": "object",
            "example": {
              "error": {
                "message": "username must be longer than or equal to 4 characters",
                "propsErrors": [
                  {
                    "property": "username",
                    "constraint": "minLength"
                  }
                ]
              }
            },
            "properties": {
              "error": {
                "type": "object",
                "properties": {
                  "propsErrors": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "property": {
                          "type": "string",
                          "enum": ["username", "password", "email"]
                        },
                        "constraint": {
                          "type": "string",
                          "enum": ["minLength", "maxLength", "isString", "isEmail"]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "SectionValidationErrorSchema": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GeneralErrorSchema"
          },
          {
            "type": "object",
            "example": {
              "error": {
                "message": "'colour' is an invalid colour string",
                "propsErrors": [
                  {
                    "property": "colour",
                    "constraint": "isValidRgbString"
                  }
                ]
              }
            },
            "properties": {
              "error": {
                "type": "object",
                "properties": {
                  "propsErrors": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "property": {
                          "type": "string",
                          "enum": ["name", "colour", "icon"]
                        },
                        "constraint": {
                          "type": "string",
                          "enum": ["isString", "isValidRgbString"]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "ProjectValidationErrorSchema": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GeneralErrorSchema"
          },
          {
            "type": "object",
            "example": {
              "error": {
                "message": "'name' must be a string",
                "propsErrors": [
                  {
                    "property": "name",
                    "constraint": "isString"
                  }
                ]
              }
            },
            "properties": {
              "error": {
                "type": "object",
                "properties": {
                  "propsErrors": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "property": {
                          "type": "string",
                          "enum": ["name", "background"]
                        },
                        "constraint": {
                          "type": "string",
                          "enum": ["isString", "minLength", "maxLength"]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "TaskValidationErrorSchema": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GeneralErrorSchema"
          },
          {
            "type": "object",
            "example": {
              "error": {
                "message": "'name' must be a string",
                "propsErrors": [
                  {
                    "property": "name",
                    "constraint": "isString"
                  }
                ]
              }
            },
            "properties": {
              "error": {
                "type": "object",
                "properties": {
                  "propsErrors": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "property": {
                          "type": "string",
                          "enum": ["name", "dueDate", "assignee", "section"]
                        },
                        "constraint": {
                          "type": "string",
                          "enum": [
                            "isString",
                            "minLength",
                            "maxLength",
                            "isDate",
                            "invalidAssignee",
                            "invalidSection"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "TagValidationErrorSchema": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GeneralErrorSchema"
          },
          {
            "type": "object",
            "example": {
              "error": {
                "message": "'name' must be a string",
                "propsErrors": [
                  {
                    "property": "name",
                    "constraint": "isString"
                  }
                ]
              }
            },
            "properties": {
              "error": {
                "type": "object",
                "properties": {
                  "propsErrors": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "property": {
                          "type": "string",
                          "enum": ["name", "colour"]
                        },
                        "constraint": {
                          "type": "string",
                          "enum": ["isString", "minLength", "maxLength", "isValidRgbString"]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "SignupUser": {
        "required": ["username", "password", "email"],
        "properties": {
          "username": {
            "type": "string",
            "minLength": 4,
            "maxLength": 30
          },
          "password": {
            "type": "string",
            "minLength": 4,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "minLength": 4,
            "maxLength": 255,
            "pattern": "email"
          }
        }
      },
      "LoginUser": {
        "required": ["username", "password"],
        "properties": {
          "username": {
            "type": "string",
            "minLength": 4,
            "maxLength": 30
          },
          "password": {
            "type": "string",
            "minLength": 4,
            "maxLength": 255
          }
        }
      },
      "User": {
        "properties": {
          "_id": {
            "type": "string",
            "minLength": 1
          },
          "username": {
            "type": "string",
            "minLength": 4,
            "maxLength": 30
          },
          "email": {
            "type": "string",
            "minLength": 4,
            "maxLength": 255,
            "pattern": "email"
          },
          "projects": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      },
      "ProjectWithoutId": {
        "example": {
          "_id": "623c8e9aa631b8ea90c9f7a3",
          "name": "test",
          "background": "#0000ff",
          "users": ["623c8d54636044a86920f83f"],
          "sections": [
            "623c8e9aa631b8ea90c9f7a7",
            "623c8e9aa631b8ea90c9f7a8",
            "623c8e9aa631b8ea90c9f7a9",
            "623c8e9aa631b8ea90c9f7aa"
          ],
          "tags": [
            "64adc1fb8dc0d632c8fd5ce8",
            "64adc1fd8dc0d632c8fd5ced",
            "64adc2048dc0d632c8fd5cf8",
            "64adc2108dc0d632c8fd5d00"
          ]
        },
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "background": {
            "type": "string"
          },
          "users": {
            "description": "User IDs",
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "sections": {
            "description": "Section IDs",
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "tags": {
            "description": "Tag IDs",
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      },
      "Project": {
        "example": {
          "_id": "623c8e9aa631b8ea90c9f7a3",
          "name": "test",
          "background": "#0000ff",
          "users": ["623c8d54636044a86920f83f"],
          "sections": [
            "623c8e9aa631b8ea90c9f7a7",
            "623c8e9aa631b8ea90c9f7a8",
            "623c8e9aa631b8ea90c9f7a9",
            "623c8e9aa631b8ea90c9f7aa"
          ],
          "tags": [
            "64adc1fb8dc0d632c8fd5ce8",
            "64adc1fd8dc0d632c8fd5ced",
            "64adc2048dc0d632c8fd5cf8",
            "64adc2108dc0d632c8fd5d00"
          ]
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ProjectWithoutId"
          },
          {
            "properties": {
              "_id": {
                "type": "string",
                "minLength": 1
              }
            }
          }
        ]
      },
      "SectionWithoutId": {
        "type": "object",
        "example": {
          "icon": "abc.png",
          "colour": "#d6a1ff",
          "name": "Done"
        },
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "icon": {
            "type": "string"
          },
          "colour": {
            "description": "RGB colour string",
            "type": "string",
            "pattern": "#[a-fA-F0-9]{6}",
            "minLength": 7,
            "maxLength": 7
          }
        }
      },
      "Section": {
        "example": {
          "_id": "624749ca6fe16ed5a43d2cf7",
          "icon": "abc.png",
          "colour": "#d6a1ff",
          "name": "Done"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/SectionWithoutId"
          },
          {
            "properties": {
              "_id": {
                "type": "string",
                "minLength": 1
              }
            }
          }
        ]
      },
      "SectionWithTasks": {
        "example": {
          "_id": "624749ca6fe16ed5a43d2cf7",
          "icon": "abc.png",
          "colour": "#d6a1ff",
          "name": "Done",
          "tasks": ["624749ca6fe16ed5a43d2cf9", "624749ca6fe16ed5a43d2cfa"]
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Section"
          },
          {
            "properties": {
              "tasks": {
                "type": "array",
                "items": {
                  "type": "string",
                  "minLength": 1
                }
              }
            }
          }
        ]
      },
      "SectionWithPopulatedTasks": {
        "example": {
          "_id": "624749ca6fe16ed5a43d2cf7",
          "icon": "abc.png",
          "colour": "#d6a1ff",
          "name": "Done",
          "tasks": [
            {
              "_id": "64adc2018dc0d632c5fd5cfe",
              "name": "Create API documentation",
              "dueDate": "2023-07-30",
              "assignee": "623c8d54636044a86920f83f",
              "comments": [
                {
                  "text": "This is my first comment on this task.",
                  "date": "2023-07-07T22:20:52.861Z",
                  "task": "64adc2018dc0d632c5fd5cfe",
                  "owner": "623c8d54636044a86920f83f",
                  "_id": "623c8d54636044a86920f83a"
                }
              ]
            }
          ]
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Section"
          },
          {
            "properties": {
              "tasks": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaskWithPopulatedComments"
                }
              }
            }
          }
        ]
      },
      "TaskWithoutId": {
        "type": "object",
        "example": {
          "name": "Create API documentation",
          "dueDate": "2023-07-07T22:20:52.861Z",
          "assignee": "623c8d54636044a86920f83f",
          "section": "623c8d54636044a86920f83a",
          "watchers": ["623c8d54636044a86920f83f"],
          "checklistItems": ["623c8d53706044a86520f831"],
          "comments": ["623c8d53706044a86520f832"],
          "tags": ["623c8d53706044a86520f833"],
          "created": "2023-07-07T22:20:52.861Z",
          "updated": "2023-07-07T22:20:52.861Z",
          "description": "Document all API endpoints using OpenAPI.",
          "status": "In progess"
        },
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "dueDate": {
            "nullable": true,
            "type": "string",
            "format": "datetime",
            "minLength": 1
          },
          "assignee": {
            "nullable": true,
            "type": "string",
            "minLength": 1
          },
          "section": {
            "type": "string",
            "minLength": 1
          },
          "watchers": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "checklistItems": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "comments": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "created": {
            "type": "string",
            "format": "datetime",
            "minLength": 1
          },
          "updated": {
            "type": "string",
            "format": "datetime",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "minLength": 1
          },
          "status": {
            "type": "string",
            "enum": ["In progress", "Done", "On hold", "Deleted"],
            "minLength": 1
          }
        }
      },
      "Task": {
        "example": {
          "_id": "624c8d54636044a86920f83f",
          "name": "Create API documentation",
          "dueDate": "2023-07-07T22:20:52.861Z",
          "assignee": "623c8d54636044a86920f83f",
          "section": "623c8d54636044a86920f83a",
          "watchers": ["623c8d54636044a86920f83f"],
          "checklistItems": ["623c8d53706044a86520f831"],
          "comments": ["623c8d53706044a86520f832"],
          "tags": ["623c8d53706044a86520f833"],
          "created": "2023-07-07T22:20:52.861Z",
          "updated": "2023-07-07T22:20:52.861Z",
          "description": "Document all API endpoints using OpenAPI.",
          "status": "In progess"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/TaskWithoutId"
          },
          {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "minLength": 1
              }
            }
          }
        ]
      },
      "TaskWithPopulatedComments": {
        "example": {
          "_id": "64adc2018dc0d632c5fd5cfe",
          "name": "Create API documentation",
          "dueDate": "2023-07-07T22:20:52.861Z",
          "assignee": "623c8d54636044a86920f83f",
          "comments": [
            {
              "text": "This is my first comment on this task.",
              "date": "",
              "task": "64adc2018dc0d632c5fd5cfe",
              "owner": "623c8d54636044a86920f83f",
              "_id": "623c8d54636044a86920f83a"
            }
          ]
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/TaskWithoutId"
          },
          {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "minLength": 1
              },
              "comments": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          }
        ]
      },
      "CommentWithoutId": {
        "type": "object",
        "example": {
          "text": "This is my first comment on this task.",
          "date": "",
          "task": "623c8d54636044a86920f83e",
          "owner": "623c8d54636044a86920f83f"
        },
        "properties": {
          "text": {
            "type": "string",
            "minLength": 1
          },
          "date": {
            "type": "string",
            "format": "datetime",
            "minLength": 1
          },
          "task": {
            "type": "string",
            "minLength": 1
          },
          "owner": {
            "type": "string",
            "minLength": 1
          }
        }
      },
      "Comment": {
        "example": {
          "text": "This is my first comment on this task.",
          "date": "",
          "task": "623c8d54636044a86920f83e",
          "owner": "623c8d54636044a86920f83f",
          "_id": "623c8d54636044a86920f83a"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/CommentWithoutId"
          },
          {
            "properties": {
              "_id": {
                "type": "string",
                "minLength": 1
              }
            }
          }
        ]
      },
      "TagWithoutId": {
        "type": "object",
        "example": {
          "name": "High priority",
          "project": "623c8e9aa631b8ea90c9f7a3",
          "tasks": ["623c8e9aa631b8ea90c9f7a4"],
          "colour": "#ff0000"
        },
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "project": {
            "type": "string",
            "minLength": 1
          },
          "tasks": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "colour": {
            "type": "string",
            "format": "RGB string",
            "pattern": "#[a-fA-F0-9]{6}",
            "minLength": 7,
            "maxLength": 7
          }
        }
      },
      "Tag": {
        "example": {
          "name": "High priority",
          "project": "623c8e9aa631b8ea90c9f7a3",
          "tasks": ["623c8e9aa631b8ea90c9f7a4"],
          "colour": "#ff0000",
          "_id": "623c8e9aa631b8ea90c9f7a5"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/TagWithoutId"
          },
          {
            "properties": {
              "_id": {
                "type": "string",
                "minLength": 1
              }
            }
          }
        ]
      }
    },
    "responses": {
      "GeneralError": {
        "description": "A general error occurred",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeneralErrorSchema"
            }
          }
        }
      },
      "UnauthorisedError": {
        "description": "Missing or invalid authentication token",
        "content": {
          "application/json": {
            "examples": {
              "Missing or invalid authentication token": {
                "value": {
                  "error": {
                    "message": "Invalid authentication token"
                  }
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/GeneralErrorSchema"
            }
          }
        }
      },
      "ValidationError": {
        "description": "A validation error occurred",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GeneralErrorSchema"
                },
                {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "propsErrors": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "InvalidProjectIdError": {
        "description": "Invalid project ID",
        "content": {
          "application/json": {
            "examples": {
              "Invalid project ID": {
                "description": "Invalid project ID. Can also be returned if the current user does not have permission to see the requested project.",
                "value": {
                  "error": {
                    "message": "No project with id '123456' found"
                  }
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/GeneralErrorSchema"
            }
          }
        }
      },
      "InvalidSectionIdError": {
        "description": "Invalid section ID",
        "content": {
          "application/json": {
            "examples": {
              "Invalid section ID": {
                "description": "Invalid section ID. Can also be returned if the current user does not have permission to see the requested section.",
                "value": {
                  "error": {
                    "message": "No section with id '123456' found"
                  }
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/GeneralErrorSchema"
            }
          }
        }
      },
      "InvalidTaskIdError": {
        "description": "Invalid task ID",
        "content": {
          "application/json": {
            "examples": {
              "Invalid task ID": {
                "description": "Invalid task ID. Can also be returned if the current user does not have permission to see the requested task.",
                "value": {
                  "error": {
                    "message": "No task with id '123456' found"
                  }
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/GeneralErrorSchema"
            }
          }
        }
      },
      "InvalidCommentIdError": {
        "description": "Invalid comment ID",
        "content": {
          "application/json": {
            "examples": {
              "Invalid comment ID": {
                "description": "Invalid comment ID. Can also be returned if the current user does not have permission to see the requested comment.",
                "value": {
                  "error": {
                    "message": "No comment with id '123456' found"
                  }
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/GeneralErrorSchema"
            }
          }
        }
      },
      "InvalidTagIdError": {
        "description": "Invalid tag ID",
        "content": {
          "application/json": {
            "examples": {
              "Invalid tag ID": {
                "description": "Invalid tag ID. Can also be returned if the current user does not have permission to see the requested tag.",
                "value": {
                  "error": {
                    "message": "No tag with id '123456' found"
                  }
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/GeneralErrorSchema"
            }
          }
        }
      }
    }
  },
  "servers": [{ "url": "https://taskmaster.omarsobhy.dev/api/v1" }],
  "paths": {
    "/users/signup": {
      "post": {
        "summary": "User signup",
        "requestBody": {
          "description": "User information",
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "Valid signup request": {
                  "value": {
                    "username": "VeryCoolUsername",
                    "password": "VeryStrongPassword",
                    "email": "cool@email.com"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/SignupUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "examples": {
                  "Valid signup request": {
                    "value": {
                      "user": {
                        "username": "VeryCoolUsername",
                        "email": "cool@email.com"
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "A validation error occurred",
            "content": {
              "application/json": {
                "examples": {
                  "Username too short": {
                    "value": {
                      "error": {
                        "message": "username must be longer than or equal to 4 characters",
                        "propsErrors": [
                          {
                            "property": "username",
                            "constraint": "minLength"
                          }
                        ]
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/SignupValidationErrorSchema"
                }
              }
            }
          },
          "409": {
            "description": "User with this username already exists",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GeneralErrorSchema"
                    },
                    {
                      "example": {
                        "error": {
                          "message": "A username with username 'VeryCoolUsername' already exists"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["users"]
      }
    },
    "/users/login": {
      "post": {
        "summary": "User login",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "Valid login request": {
                  "value": {
                    "username": "VeryCoolUsername",
                    "password": "VeryStrongPassword"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/LoginUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "type": "string",
                  "example": "Authorization=abcde12345; Path=/;"
                }
              }
            },
            "content": {
              "application/json": {
                "examples": {
                  "Valid login request": {
                    "value": {
                      "_id": "623c8e9aa631b8ea90c9f7a0",
                      "username": "VeryCoolUsername",
                      "email": "cool@email.com",
                      "projects": ["623c8e9aa631b8ea90c9f7a3", "624749ca6fe16ed5a43d2cf1"]
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid username or password",
            "content": {
              "application/json": {
                "examples": {
                  "Invalid username or password": {
                    "value": {
                      "error": {
                        "message": "Invalid username or password"
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/GeneralErrorSchema"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "A validation error occurred",
            "content": {
              "application/json": {
                "examples": {
                  "Username too short": {
                    "value": {
                      "error": {
                        "message": "username must be longer than or equal to 4 characters",
                        "propsErrors": [
                          {
                            "property": "username",
                            "constraint": "minLength"
                          }
                        ]
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/LoginValidationErrorSchema"
                }
              }
            }
          }
        },
        "tags": ["users"]
      }
    },
    "/users": {
      "get": {
        "description": "Get user data by ID(s)",
        "tags": ["users"],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "description": "User ID(s)",
            "in": "query",
            "explode": true,
            "style": "form",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "examples": {
                  "All IDs are valid": {
                    "description": "All IDs are valid",
                    "value": {
                      "users": [
                        {
                          "_id": "623c8d54636044a86920f83f",
                          "email": "cool@email.com",
                          "username": "omar",
                          "projects": ["623c8e9aa631b8ea90c9f7a3", "624749ca6fe16ed5a43d2cf1"]
                        },
                        {
                          "_id": "623c8d54636044a86920f83e",
                          "email": "another@email.com",
                          "username": "sobhy",
                          "projects": ["623c8e9aa631b8ea90c9f7a3", "624749ca6fe16ed5a43d2cf1"]
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "users": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            },
                            "username": {
                              "type": "string"
                            },
                            "projects": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          },
          "404": {
            "description": "Invalid user ID",
            "content": {
              "application/json": {
                "examples": {
                  "Invalid user ID passed": {
                    "value": {
                      "error": {
                        "message": "No user with id '123456' found.\nNo user with id 'abcdef' found."
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects": {
      "get": {
        "summary": "Get all projects for user",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "projects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Project"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          }
        },
        "tags": ["projects"]
      },
      "post": {
        "description": "Create new project",
        "tags": ["projects"],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "Valid request": {
                  "value": {
                    "name": "Test project",
                    "background": ""
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": ["name", "background"],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "background": {
                    "description": "Currently unused",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "examples": {
                  "New project": {
                    "value": {
                      "name": "Test Project",
                      "background": "",
                      "sections": [],
                      "users": [],
                      "tags": []
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          },
          "403": {
            "description": "A validation error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectValidationErrorSchema"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}": {
      "get": {
        "summary": "Get project data by project ID",
        "tags": ["projects"],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "required": true,
            "name": "projectId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "examples": {
              "Valid project Id": {
                "value": "624749ca6fe16ed5a43d2cf1"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "project": {
                      "$ref": "#/components/schemas/Project"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          },
          "404": {
            "$ref": "#/components/responses/InvalidProjectIdError"
          }
        }
      }
    },
    "/projects/{projectId}/sections": {
      "get": {
        "tags": ["projects", "sections"],
        "description": "Get all sections belonging to a project",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "required": true,
            "name": "projectId",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Section"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          },
          "404": {
            "$ref": "#/components/responses/InvalidProjectIdError"
          }
        }
      },
      "post": {
        "description": "Create new sections",
        "tags": ["sections"],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "Valid request": {
                  "value": {
                    "sections": [
                      {
                        "name": "In-progress",
                        "icon": "",
                        "colour": "#00ff00"
                      },
                      {
                        "name": "Done",
                        "icon": "",
                        "colour": "#0000ff"
                      }
                    ]
                  }
                }
              },
              "schema": {
                "type": "object",
                "properties": {
                  "sections": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "colour": {
                          "type": "string",
                          "pattern": "#[a-fA-F0-9]{6}"
                        },
                        "icon": {
                          "description": "Currently unused.",
                          "type": "string"
                        },
                        "name": {
                          "type": "string",
                          "maxLength": 255
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SectionWithTasks"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          },
          "404": {
            "$ref": "#/components/responses/InvalidProjectIdError"
          },
          "403": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/responses/ValidationError"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "message": {
                              "type": "string",
                              "example": "'123456' is an invalid colour string"
                            },
                            "propsErrors": {
                              "type": "object",
                              "properties": {
                                "colour": {
                                  "type": "string",
                                  "pattern": "#[a-fA-F0-9]{6}",
                                  "example": "isValidRgbString"
                                },
                                "name": {
                                  "type": "string",
                                  "example": "maxLength"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/tags": {
      "get": {
        "description": "Get tags for project",
        "tags": ["tags", "projects"],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          },
          "404": {
            "$ref": "#/components/responses/InvalidProjectIdError"
          }
        }
      },
      "post": {
        "description": "Create tag in project",
        "tags": ["tags", "projects"],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "colour"],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "colour": {
                    "type": "string",
                    "format": "RGB string",
                    "pattern": "#[a-fA-F0-9]{6}"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          },
          "403": {
            "description": "A validation error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagValidationErrorSchema"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/InvalidProjectIdError"
          }
        }
      }
    },
    "/sections/{sectionId}": {
      "parameters": [
        {
          "required": true,
          "name": "sectionId",
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get section data",
        "tags": ["sections"],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "section": {
                      "$ref": "#/components/schemas/Section"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          },
          "404": {
            "$ref": "#/components/responses/InvalidSectionIdError"
          }
        }
      },
      "patch": {
        "description": "Update section data. Supports patch semantics, i.e. unsent fields will retain their values.",
        "summary": "Update section data",
        "tags": ["sections"],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "Valid request": {
                  "$ref": "#/components/schemas/Section"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/Section"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Section"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          },
          "403": {
            "description": "A validation error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionValidationErrorSchema"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/InvalidSectionIdError"
          }
        }
      },
      "delete": {
        "description": "Delete section. This will also delete all associated tasks and comments.",
        "summary": "Delete section",
        "tags": ["sections"],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionWithPopulatedTasks"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          },
          "404": {
            "$ref": "#/components/responses/InvalidSectionIdError"
          }
        }
      }
    },
    "/sections/{sectionId}/tasks": {
      "get": {
        "description": "Get all tasks in a section",
        "tags": ["sections", "tasks"],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          },
          "403": {
            "description": "A validation error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionValidationErrorSchema"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/InvalidSectionIdError"
          }
        }
      },
      "post": {
        "description": "Create a new task",
        "tags": ["tasks"],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "Name only": {
                  "value": {
                    "name": "Create API documentation"
                  }
                },
                "Due date included": {
                  "value": {
                    "name": "Create API documentation",
                    "dueDate": "2023-07-30"
                  }
                },
                "Full request": {
                  "value": {
                    "name": "Create API documentation",
                    "dueDate": "2023-07-30",
                    "assignee": "623c8d54636044a86920f83f"
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "dueDate": {
                    "type": "string",
                    "pattern": "\\d{4}-\\d{2}-\\d{2}",
                    "format": "date"
                  },
                  "assignee": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          },
          "403": {
            "description": "A validation error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskValidationErrorSchema"
                }
              }
            }
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "description": "Get all tasks assigned to user",
        "tags": ["tasks"],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          }
        }
      }
    },
    "/tasks/{taskId}": {
      "parameters": [
        {
          "name": "taskId",
          "required": true,
          "in": "path",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Get task data by task ID",
        "tags": ["tasks"],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {}
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          },
          "404": {
            "$ref": "#/components/responses/InvalidTaskIdError"
          }
        }
      },
      "patch": {
        "description": "Update task data. Supports patch semantics, i.e. unsent fields will retain their values.",
        "summary": "Update task data",
        "tags": ["tasks"],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          },
          "403": {
            "description": "A validation error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskValidationErrorSchema"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/InvalidTaskIdError"
          }
        }
      }
    },
    "/task/{taskId}/comments": {
      "get": {
        "description": "Get all comments for task",
        "tags": ["comments", "tasks"],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "taskId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          },
          "404": {
            "$ref": "#/components/responses/InvalidTaskIdError"
          }
        }
      },
      "post": {
        "description": "Create a new comment for task",
        "tags": ["comments", "tasks"],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "taskId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "Creating a new comment": {
                  "value": {
                    "text": "This is my first comment for this task."
                  }
                }
              },
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/InvalidTaskIdError"
          }
        }
      }
    },
    "/comments": {
      "get": {
        "description": "Get comments by comment ID(s)",
        "tags": ["comments"],
        "parameters": [
          {
            "name": "commentId",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          }
        }
      }
    },
    "/comments/{commentId}": {
      "get": {
        "description": "Get comment data by comment ID",
        "tags": ["comments"],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          },
          "404": {
            "$ref": "#/components/responses/InvalidCommentIdError"
          }
        }
      },
      "patch": {
        "description": "Update comment",
        "parameters": [],
        "tags": ["comments"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          },
          "404": {
            "$ref": "#/components/responses/InvalidCommentIdError"
          }
        }
      }
    },
    "/tags": {
      "get": {
        "description": "Get tag data by ID(s)",
        "tags": ["tags"],
        "parameters": [
          {
            "name": "tagId",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tags/{tagId}": {
      "get": {
        "description": "Get tag data by tag ID",
        "tags": ["tags"],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          },
          "404": {
            "$ref": "#/components/responses/InvalidTagIdError"
          }
        }
      },
      "patch": {
        "description": "Update tag",
        "tags": ["tags"],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "Valid request": {
                  "value": {
                    "name": "High priority",
                    "colour": "#ff0000"
                  }
                }
              },
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "colour": {
                    "type": "string",
                    "format": "RGB string",
                    "pattern": "#[a-fA-F0-9]{6}"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          }
        }
      },
      "delete": {
        "summary": "Delete tag",
        "description": "Delete tag. This will also remove it from all associated tasks and its project",
        "tags": ["tags"],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedError"
          },
          "404": {
            "$ref": "#/components/responses/InvalidTagIdError"
          }
        }
      }
    }
  }
}
